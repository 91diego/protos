// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: menu/services/service.proto

package protos

import (
	context "context"
	messages "github.com/91diego/protos/menu/messages"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MenuServiceClient is the client API for MenuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MenuServiceClient interface {
	GetMenu(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.GetMenuResponse, error)
	CreateCategory(ctx context.Context, in *messages.CreateCategoryRequest, opts ...grpc.CallOption) (*messages.CreateCategoryResponse, error)
	UpdateCategory(ctx context.Context, in *messages.UpdateCategoryRequest, opts ...grpc.CallOption) (*messages.UpdateCategoryResponse, error)
	DeleteCategory(ctx context.Context, in *messages.DeleteCategoryRequest, opts ...grpc.CallOption) (*messages.DeleteCategoryResponse, error)
	AddElement(ctx context.Context, in *messages.AddElementRequest, opts ...grpc.CallOption) (*messages.AddElementResponse, error)
	UpdateElement(ctx context.Context, in *messages.UpdateElementRequest, opts ...grpc.CallOption) (*messages.UpdateElementResponse, error)
	DeleteElement(ctx context.Context, in *messages.DeleteElementRequest, opts ...grpc.CallOption) (*messages.DeleteElementResponse, error)
}

type menuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMenuServiceClient(cc grpc.ClientConnInterface) MenuServiceClient {
	return &menuServiceClient{cc}
}

func (c *menuServiceClient) GetMenu(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.GetMenuResponse, error) {
	out := new(messages.GetMenuResponse)
	err := c.cc.Invoke(ctx, "/menu.MenuService/GetMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) CreateCategory(ctx context.Context, in *messages.CreateCategoryRequest, opts ...grpc.CallOption) (*messages.CreateCategoryResponse, error) {
	out := new(messages.CreateCategoryResponse)
	err := c.cc.Invoke(ctx, "/menu.MenuService/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) UpdateCategory(ctx context.Context, in *messages.UpdateCategoryRequest, opts ...grpc.CallOption) (*messages.UpdateCategoryResponse, error) {
	out := new(messages.UpdateCategoryResponse)
	err := c.cc.Invoke(ctx, "/menu.MenuService/UpdateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) DeleteCategory(ctx context.Context, in *messages.DeleteCategoryRequest, opts ...grpc.CallOption) (*messages.DeleteCategoryResponse, error) {
	out := new(messages.DeleteCategoryResponse)
	err := c.cc.Invoke(ctx, "/menu.MenuService/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) AddElement(ctx context.Context, in *messages.AddElementRequest, opts ...grpc.CallOption) (*messages.AddElementResponse, error) {
	out := new(messages.AddElementResponse)
	err := c.cc.Invoke(ctx, "/menu.MenuService/AddElement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) UpdateElement(ctx context.Context, in *messages.UpdateElementRequest, opts ...grpc.CallOption) (*messages.UpdateElementResponse, error) {
	out := new(messages.UpdateElementResponse)
	err := c.cc.Invoke(ctx, "/menu.MenuService/UpdateElement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuServiceClient) DeleteElement(ctx context.Context, in *messages.DeleteElementRequest, opts ...grpc.CallOption) (*messages.DeleteElementResponse, error) {
	out := new(messages.DeleteElementResponse)
	err := c.cc.Invoke(ctx, "/menu.MenuService/DeleteElement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MenuServiceServer is the server API for MenuService service.
// All implementations must embed UnimplementedMenuServiceServer
// for forward compatibility
type MenuServiceServer interface {
	GetMenu(context.Context, *emptypb.Empty) (*messages.GetMenuResponse, error)
	CreateCategory(context.Context, *messages.CreateCategoryRequest) (*messages.CreateCategoryResponse, error)
	UpdateCategory(context.Context, *messages.UpdateCategoryRequest) (*messages.UpdateCategoryResponse, error)
	DeleteCategory(context.Context, *messages.DeleteCategoryRequest) (*messages.DeleteCategoryResponse, error)
	AddElement(context.Context, *messages.AddElementRequest) (*messages.AddElementResponse, error)
	UpdateElement(context.Context, *messages.UpdateElementRequest) (*messages.UpdateElementResponse, error)
	DeleteElement(context.Context, *messages.DeleteElementRequest) (*messages.DeleteElementResponse, error)
	mustEmbedUnimplementedMenuServiceServer()
}

// UnimplementedMenuServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMenuServiceServer struct {
}

func (UnimplementedMenuServiceServer) GetMenu(context.Context, *emptypb.Empty) (*messages.GetMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenu not implemented")
}
func (UnimplementedMenuServiceServer) CreateCategory(context.Context, *messages.CreateCategoryRequest) (*messages.CreateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedMenuServiceServer) UpdateCategory(context.Context, *messages.UpdateCategoryRequest) (*messages.UpdateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedMenuServiceServer) DeleteCategory(context.Context, *messages.DeleteCategoryRequest) (*messages.DeleteCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedMenuServiceServer) AddElement(context.Context, *messages.AddElementRequest) (*messages.AddElementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddElement not implemented")
}
func (UnimplementedMenuServiceServer) UpdateElement(context.Context, *messages.UpdateElementRequest) (*messages.UpdateElementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateElement not implemented")
}
func (UnimplementedMenuServiceServer) DeleteElement(context.Context, *messages.DeleteElementRequest) (*messages.DeleteElementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteElement not implemented")
}
func (UnimplementedMenuServiceServer) mustEmbedUnimplementedMenuServiceServer() {}

// UnsafeMenuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MenuServiceServer will
// result in compilation errors.
type UnsafeMenuServiceServer interface {
	mustEmbedUnimplementedMenuServiceServer()
}

func RegisterMenuServiceServer(s grpc.ServiceRegistrar, srv MenuServiceServer) {
	s.RegisterService(&MenuService_ServiceDesc, srv)
}

func _MenuService_GetMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).GetMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.MenuService/GetMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).GetMenu(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.MenuService/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).CreateCategory(ctx, req.(*messages.CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.MenuService/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).UpdateCategory(ctx, req.(*messages.UpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.MenuService/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).DeleteCategory(ctx, req.(*messages.DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_AddElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AddElementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).AddElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.MenuService/AddElement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).AddElement(ctx, req.(*messages.AddElementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_UpdateElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateElementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).UpdateElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.MenuService/UpdateElement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).UpdateElement(ctx, req.(*messages.UpdateElementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuService_DeleteElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.DeleteElementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServiceServer).DeleteElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.MenuService/DeleteElement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServiceServer).DeleteElement(ctx, req.(*messages.DeleteElementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MenuService_ServiceDesc is the grpc.ServiceDesc for MenuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MenuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "menu.MenuService",
	HandlerType: (*MenuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMenu",
			Handler:    _MenuService_GetMenu_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _MenuService_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _MenuService_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _MenuService_DeleteCategory_Handler,
		},
		{
			MethodName: "AddElement",
			Handler:    _MenuService_AddElement_Handler,
		},
		{
			MethodName: "UpdateElement",
			Handler:    _MenuService_UpdateElement_Handler,
		},
		{
			MethodName: "DeleteElement",
			Handler:    _MenuService_DeleteElement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "menu/services/service.proto",
}
